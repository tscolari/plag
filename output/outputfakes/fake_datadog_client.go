// This file was generated by counterfeiter
package outputfakes

import (
	"sync"

	"github.com/tscolari/plag/output"
	go_datadog_api "github.com/zorkian/go-datadog-api"
)

type FakeDatadogClient struct {
	PostMetricsStub        func(series []go_datadog_api.Metric) error
	postMetricsMutex       sync.RWMutex
	postMetricsArgsForCall []struct {
		series []go_datadog_api.Metric
	}
	postMetricsReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatadogClient) PostMetrics(series []go_datadog_api.Metric) error {
	var seriesCopy []go_datadog_api.Metric
	if series != nil {
		seriesCopy = make([]go_datadog_api.Metric, len(series))
		copy(seriesCopy, series)
	}
	fake.postMetricsMutex.Lock()
	fake.postMetricsArgsForCall = append(fake.postMetricsArgsForCall, struct {
		series []go_datadog_api.Metric
	}{seriesCopy})
	fake.recordInvocation("PostMetrics", []interface{}{seriesCopy})
	fake.postMetricsMutex.Unlock()
	if fake.PostMetricsStub != nil {
		return fake.PostMetricsStub(series)
	} else {
		return fake.postMetricsReturns.result1
	}
}

func (fake *FakeDatadogClient) PostMetricsCallCount() int {
	fake.postMetricsMutex.RLock()
	defer fake.postMetricsMutex.RUnlock()
	return len(fake.postMetricsArgsForCall)
}

func (fake *FakeDatadogClient) PostMetricsArgsForCall(i int) []go_datadog_api.Metric {
	fake.postMetricsMutex.RLock()
	defer fake.postMetricsMutex.RUnlock()
	return fake.postMetricsArgsForCall[i].series
}

func (fake *FakeDatadogClient) PostMetricsReturns(result1 error) {
	fake.PostMetricsStub = nil
	fake.postMetricsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatadogClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postMetricsMutex.RLock()
	defer fake.postMetricsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDatadogClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ output.DatadogClient = new(FakeDatadogClient)
